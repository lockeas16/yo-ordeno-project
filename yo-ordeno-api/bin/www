#!/usr/bin/env node

const http = require("http");

let app = require("../app");

app.use((req, res, next) => {
  res.status(404);
  res.json({ error: { message: "Recurso no encontrado" } });
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  if (!res.headersSent) {
    const error = {
      name: err.name,
      message: err.message,
      action: err.action
    };
    res.status(500);
    res.json({ error });
  }
});

let server = http.createServer(app);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// Server that emits kitchen data
const io = require("socket.io")(server);
const nsp = io.of("/api/kitchen");
const Order = require("../helpers/order");

const getOrders = (restaurant, table) => {
  return Order.getOrders(restaurant, table)
    .then(orders => orders)
    .catch(error => {
      console.log(error);
      throw error;
    });
};

io.on("connection", socket => {
  console.log("New client connected to server");
  socket.on("disconnect", () => console.log("Client disconnected from server"));
});

nsp.on("connection", socket => {
  console.log("Client connected to nsp: /api/kitchen");
  // when creating a new dish, emits an event to al sockets joined on that room
  socket.on("new-dish", (restaurant, table) => {
    getOrders(restaurant, table)
      .then(orders => {
        nsp.to(`${restaurant}-${table}`).emit("orders", orders);
      })
      .catch(error => {
        console.log(error);
      });
  });
  // when it connects to check status, retrieve all orders and emit that data to that particular socket
  socket.on("connected", (restaurant, table) => {
    socket.join(`${restaurant}-${table}`);
    getOrders(restaurant, table)
      .then(orders => {
        socket.emit("orders", orders);
      })
      .catch(error => {
        console.log(error);
      });
  });
  // at disconnection, leave this room
  socket.on("disconnect", (restaurant, table) => {
    console.log("Client disconnected from nsp: /api/kitchen");
    socket.leave(`${restaurant}-${table}`);
  });
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
